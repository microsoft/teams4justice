// App Service - Bicep module
// Generated by NubesGen (www.nubesgen.com)
@description('The name of the Application')
param applicationName string

@description('The name of the service')
@allowed([
  'teamsapp'
  'bot'
  'notify'
  'api'
  'dbconfig'
])
param serviceName string

@description('The environment (dev, test, prod, ...')
@maxLength(4)
param environment string

@description('The number of this specific instance')
@maxLength(4)
param deploymentId string

@description('The Azure region where all resources in this deployment should be created')
param location string = resourceGroup().location

@description('The calling service application settings.')
param appSettings array

@description('A list of tags to apply to the resources')
param resourceTags object

@description('The Id of the App Service Plan')
param appServicePlanId string

@description('The flag to enable or disable of the Staging slot')
param isStagingSlot bool

@description('The name of the Shared resource group for the reference.')
var sharedResourceGroup = 'rg-${applicationName}-${environment}-${deploymentId}'
var appInsightsResourceName = 'ai-${applicationName}-${environment}-${deploymentId}'

@description('The user managed identity name to assign to the Event Grid Topic')
param userManagedIdentity string

var appName = '${serviceName}-${applicationName}-${environment}-${deploymentId}'
var stagingSlotName = '${appName}/staging'

resource appInsights 'Microsoft.Insights/components@2020-02-02' existing = {
  name: appInsightsResourceName
  scope: resourceGroup(sharedResourceGroup)
}

// Reference: https://docs.microsoft.com/azure/templates/microsoft.web/sites?tabs=bicep
resource appServiceApp 'Microsoft.Web/sites@2022-03-01' = {
  name: appName
  location: location
  tags: resourceTags
  kind: 'app,linux'
  identity: {
    type: 'SystemAssigned, UserAssigned'
    userAssignedIdentities: {
      '/subscriptions/${subscription().subscriptionId}/resourceGroups/${sharedResourceGroup}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/${userManagedIdentity}': {}
    }
  }
  properties: {
    enabled: true
    serverFarmId: appServicePlanId
    reserved: true
    httpsOnly: true
    clientAffinityEnabled: false
    publicNetworkAccess: 'Enabled'
    storageAccountRequired: false
    keyVaultReferenceIdentity: 'SystemAssigned'
    siteConfig: {
      numberOfWorkers: 1
      linuxFxVersion: 'NODE|16-lts'
      alwaysOn: true
      appCommandLine: 'node ./dist/main.js'
      acrUseManagedIdentityCreds: false
      http20Enabled: false
      functionAppScaleLimit: 0
      minimumElasticInstanceCount: 0
      ftpsState: 'FtpsOnly'
      minTlsVersion: '1.2'
      virtualApplications: [
        {
          virtualPath: '/'
          physicalPath: 'site\\wwwroot'
          preloadEnabled: true
        }
      ]
      loadBalancing: 'LeastRequests'
      experiments: {
        rampUpRules: []
      }
      autoHealEnabled: false
      ipSecurityRestrictions: [
        {
          ipAddress: 'Any'
          action: 'Allow'
          priority: 2147483647
          name: 'Allow all'
          description: 'Allow all access'
        }
      ]
      scmIpSecurityRestrictions: [
        {
          ipAddress: 'Any'
          action: 'Allow'
          priority: 2147483647
          name: 'Allow all'
          description: 'Allow all access'
        }
      ]
      scmIpSecurityRestrictionsUseMain: false
      scmMinTlsVersion: '1.2'
      azureStorageAccounts: {
      }
      appSettings: concat( appSettings, [
        {
          name: 'WEBSITES_ENABLE_APP_SERVICE_STORAGE'
          value: 'false'
        }
        {
          name: 'WEBSITE_RUN_FROM_PACKAGE'
          value: '1'
        }
        {
          name: 'WEBSITE_NODE_DEFAULT_VERSION'
          value: '~16'
        }
        {
          name: 'WEBSITE_DISABLE_MSI'
          value: 'false'
        }
        {
          name: 'APPINSIGHTS_INSTRUMENTATIONKEY'
          value: appInsights.properties.InstrumentationKey
        }
      ])
    }
  }
}


resource appServiceAppStaging 'Microsoft.Web/sites/slots@2022-03-01' = if(isStagingSlot)  {
  name: stagingSlotName
  location: location
  tags: resourceTags
  kind: 'app,linux'
  identity: {
    type: 'SystemAssigned'
  }
  properties: {
    serverFarmId: appServicePlanId
    httpsOnly: true
    siteConfig: {
      detailedErrorLoggingEnabled: true
      httpLoggingEnabled: true
      requestTracingEnabled: true
      ftpsState: 'Disabled'
      autoSwapSlotName: 'production'
      http20Enabled: false
      keyVaultReferenceIdentity: 'SystemAssigned'
      linuxFxVersion: 'NODE|16-lts'
      minTlsVersion: '1.2'
      nodeVersion: '~16'
      numberOfWorkers: 1
      publicNetworkAccess: 'Enabled'
      remoteDebuggingEnabled: false
    }
    cloningInfo: {
      appSettingsOverrides: {}
      cloneCustomHostNames: true
      cloneSourceControl: true
      configureLoadBalancing: true
      overwrite: false
      sourceWebAppId: appServiceApp.id
      sourceWebAppLocation: location
    }
    storageAccountRequired: false
  }
  dependsOn: [
    appServiceApp
  ]
}


output application_name string = appServiceApp.name
output application_host string = appServiceApp.properties.hostNames[0]
output system_assigned_identity string = appServiceApp.identity.principalId

output application_name_staging string = isStagingSlot ? appServiceAppStaging.name : ''
output application_host_staging string = isStagingSlot ? appServiceAppStaging.properties.hostNames[0] : ''
// output system_assigned_identity_staging string = appServiceAppStaging.identity.principalId
